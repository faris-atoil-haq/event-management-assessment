"""
Django settings for event_management project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import dj_database_url

# Initialize environment variables
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env.read_env(env_file=str(BASE_DIR) + "/.env")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)
PROD = env.bool('PROD', default=False)
STAGING = env.bool('STAGING', default=False)
SITE_URL = env('SITE_URL', default='http://localhost:8000')
SITE_URL_STATIC = env("SITE_URL_STATIC", default='http://localhost:8000/static/')
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])
IS_VERCEL = os.environ.get('VERCEL', False)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Where collectstatic puts files

# Only use STATICFILES_DIRS in development
if DEBUG and not IS_VERCEL:
    STATICFILES_DIRS = [BASE_DIR / 'static']
else:
    # Don't use STATICFILES_DIRS in production after collectstatic
    STATICFILES_DIRS = []

# ALLOWED_HOSTS configuration
if IS_VERCEL:
    # For Vercel: Allow all Vercel domains
    ALLOWED_HOSTS = [
        '.vercel.app',
        '.now.sh',
        'localhost',
        '127.0.0.1',
        'event-management-assessment.vercel.app'
    ]
    # Add specific Vercel URLs from environment
    vercel_url = os.environ.get('VERCEL_URL')
    if vercel_url:
        ALLOWED_HOSTS.append(vercel_url)

    # Static files for Vercel
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Application definition
INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    'app',
    'compressor',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Modify to login by EMAIL or username
AUTHENTICATION_BACKENDS = [
    'utils.backends.ExtendedUserModelBackend',
]

ROOT_URLCONF = "event_management.urls"

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/login/"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "utils.custom_context_processors.custom_context",
            ],
        },
    },
]

WSGI_APPLICATION = "event_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
DATABASES = {
    "default": dj_database_url.config(
        default=env('DATABASE_URL')
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}


# Configure Compressor
COMPRESS_ROOT = BASE_DIR / 'static'
COMPRESS_ENABLED = not DEBUG

# Static files finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# WhiteNoise configuration (since you have it installed)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
